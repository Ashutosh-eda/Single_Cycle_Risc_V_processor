$date
	Thu Jul  3 20:01:15 2025
$end

$version
	Synopsys VCS version U-2023.03-SP2_Full64
$end

$timescale
	1ps
$end

$comment Csum: 1 8c6392f28f52ffa7 $end


$scope module tb_single_cycle_cpu $end
$var wire 32 ! x1 [31:0] $end
$var wire 32 " x2 [31:0] $end
$var wire 32 # x3 [31:0] $end
$var wire 32 $ mem_88 [31:0] $end
$var reg 1 % clk $end
$var reg 1 & reset $end

$scope task check_equal $end
$var reg 32 ' actual [31:0] $end
$var reg 32 ( expected [31:0] $end
$upscope $end


$scope module DUT $end
$var wire 1 % clk $end
$var wire 1 & reset $end
$var wire 32 ) pc [31:0] $end
$var wire 32 * next_pc [31:0] $end
$var wire 32 + pc_plus4 [31:0] $end
$var wire 32 , branch_target [31:0] $end
$var wire 32 - instr [31:0] $end
$var wire 7 . opcode [6:0] $end
$var wire 5 / rd [4:0] $end
$var wire 3 0 funct3 [2:0] $end
$var wire 5 1 rs1 [4:0] $end
$var wire 5 2 rs2 [4:0] $end
$var wire 7 3 funct7 [6:0] $end
$var wire 1 4 RegWrite $end
$var wire 1 5 ALUSrc $end
$var wire 1 6 MemRead $end
$var wire 1 7 MemWrite $end
$var wire 1 8 MemtoReg $end
$var wire 1 9 Branch $end
$var wire 2 : ALUOp [1:0] $end
$var wire 1 ; PCSrc $end
$var wire 32 < reg_rs1 [31:0] $end
$var wire 32 = reg_rs2 [31:0] $end
$var wire 32 > write_data [31:0] $end
$var wire 32 ? imm [31:0] $end
$var wire 32 @ alu_in_B [31:0] $end
$var wire 32 A alu_result [31:0] $end
$var wire 4 B ALUCtl [3:0] $end
$var wire 1 C Zero $end
$var wire 32 D dmem_read_data [31:0] $end

$scope module PC0 $end
$var reg 32 ) pc [31:0] $end
$var wire 1 % clk $end
$var wire 1 & reset $end
$var wire 32 * next_pc [31:0] $end
$upscope $end


$scope module IMEM0 $end
$var wire 32 ) addr [31:0] $end
$var wire 32 - instr [31:0] $end
$upscope $end


$scope module CTRL0 $end
$var wire 7 E opcode [6:0] $end
$var reg 1 4 RegWrite $end
$var reg 1 5 ALUSrc $end
$var reg 1 6 MemRead $end
$var reg 1 7 MemWrite $end
$var reg 1 8 MemtoReg $end
$var reg 1 9 Branch $end
$var reg 2 : ALUOp [1:0] $end
$upscope $end


$scope module RF0 $end
$var wire 1 % clk $end
$var wire 1 & reset $end
$var wire 5 1 rs1 [4:0] $end
$var wire 32 < rd1 [31:0] $end
$var wire 5 2 rs2 [4:0] $end
$var wire 32 = rd2 [31:0] $end
$var wire 1 4 we $end
$var wire 5 / rd [4:0] $end
$var wire 32 > wd [31:0] $end
$var integer 32 F i $end
$upscope $end


$scope module IMM0 $end
$var wire 32 - instr [31:0] $end
$var reg 32 ? imm [31:0] $end
$var wire 7 E opcode [6:0] $end
$upscope $end


$scope module ALUCTL0 $end
$var wire 2 : ALUOp [1:0] $end
$var wire 7 G funct7 [6:0] $end
$var wire 3 H funct3 [2:0] $end
$var reg 4 B ALUCtl [3:0] $end
$upscope $end


$scope module ALU0 $end
$var wire 32 < A [31:0] $end
$var wire 32 @ B [31:0] $end
$var wire 4 B ALUCtl [3:0] $end
$var reg 32 A Result [31:0] $end
$var wire 1 C Zero $end
$upscope $end


$scope module DMEM0 $end
$var wire 1 % clk $end
$var wire 1 6 MemRead $end
$var wire 1 7 MemWrite $end
$var wire 32 A addr [31:0] $end
$var wire 32 = write_data [31:0] $end
$var wire 32 D read_data [31:0] $end
$upscope $end


$scope module PCMUX0 $end
$var wire 32 + pc_plus4 [31:0] $end
$var wire 32 , branch_target [31:0] $end
$var wire 1 ; PCSrc $end
$var wire 32 * next_pc [31:0] $end
$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end

#0
$dumpvars
15
09
16
07
18
14
0%
1&
x;
xC
b0010 B
b00 :
b00000000000000000000000010000000 ?
b00000000000000000000000000000000 )
b00000000000000000000000010000000 A
b00000000000000000000000010000000 @
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx '
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (
b00000000000000000000000000000001 D
b010 H
b0000100 G
b00000000000000000000000000100000 F
b00001000000000000010000010000011 -
b00000000000000000000000000000000 $
b00000000000000000000000000000100 *
b0000011 E
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
bxxxxxxx .
bxxxxx /
bxxx 0
bxxxxx 1
bxxxxx 2
bxxxxxxx 3
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx +
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,
b00000000000000000000000000000001 >
b00000000000000000000000000000000 !
b00000000000000000000000000000000 "
b00000000000000000000000000000000 #
$end
b0000011 .
b00001 /
b010 0
b00000 1
b00000 2
b0000100 3
b00000000000000000000000010000000 ,
b00000000000000000000000000000100 +
0;
0C
#5000
1%
#10000
0%
#15000
1%
0&
#20000
0%
#25000
1%
b00000000000000000000000000000100 )
b00000000000000000000000010000100 ,
b00000000000000000000000000001000 +
b00001000010000000010000100000011 -
b00010 /
b00100 2
b00000000000000000000000000000001 !
b00000000000000000000000010000100 ?
b00000000000000000000000010001000 ,
b00000000000000000000000000001000 *
b00000000000000000000000010000100 @
b00000000000000000000000010000100 A
b00000000000000000000000000000010 D
b00000000000000000000000000000010 >
#30000
0%
#35000
1%
b00000000000000000000000000001000 )
b00000000000000000000000010001100 ,
b00000000000000000000000000001100 +
b00000000001000001000000110110011 -
b0110011 .
b00011 /
b000 0
b00001 1
b00010 2
b0000000 3
b0110011 E
b0000000 G
b000 H
b00000000000000000000000000000010 "
b00000000000000000000000000000001 <
05
06
08
b10 :
b00000000000000000000000000000000 ?
b00000000000000000000000000001000 ,
b00000000000000000000000000001100 *
b00000000000000000000000010000101 A
b00000000000000000000000000000000 @
b00000000000000000000000000000000 D
b00000000000000000000000010000101 >
b00000000000000000000000000000010 =
b00000000000000000000000000000001 A
b00000000000000000000000000000010 @
b00000000000000000000000000000001 >
b00000000000000000000000000000011 A
b00000000000000000000000000000011 >
#40000
0%
#45000
1%
b00000000000000000000000000001100 )
b00000000000000000000000000001100 ,
b00000000000000000000000000010000 +
b00001000001100000010010000100011 -
b0100011 .
b01000 /
b010 0
b00000 1
b00011 2
b0000100 3
b0100011 E
b0000100 G
b010 H
b00000000000000000000000000000011 #
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
04
15
17
b00 :
b00000000000000000000000010001000 ?
b00000000000000000000000010010100 ,
b00000000000000000000000000010000 *
b00000000000000000000000000000010 A
b00000000000000000000000010001000 @
b00000000000000000000000000000011 =
b00000000000000000000000000000010 >
b00000000000000000000000010001000 A
b00000000000000000000000010001000 >
#50000
0%
#55000
1%
b00000000000000000000000000010000 )
b00000000000000000000000010011000 ,
b00000000000000000000000000010100 +
b00000000000000000000000001100011 -
b1100011 .
b00000 /
b000 0
b00000 2
b0000000 3
b1100011 E
b0000000 G
b000 H
b00000000000000000000000000000011 $
b00000000000000000000000000000000 =
05
07
19
b01 :
b00000000000000000000000000000000 ?
b00000000000000000000000000010000 ,
b0110 B
b00000000000000000000000000010100 *
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
1;
1C
b00000000000000000000000000010000 *
b00000000000000000000000000000000 >
#60000
0%
#65000
1%
#70000
0%
#75000
1%
#80000
0%
#85000
1%
#90000
0%
#95000
1%
#100000
0%
#105000
1%
#110000
0%
#115000
1%
#120000
0%
#125000
1%
b00000000000000000000000000000001 '
b00000000000000000000000000000001 (
b00000000000000000000000000000010 '
b00000000000000000000000000000010 (
b00000000000000000000000000000011 '
b00000000000000000000000000000011 (
b00000000000000000000000000010000 '
b00000000000000000000000000010000 (
